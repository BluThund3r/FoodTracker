// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  isAdmin      Boolean        @default(false)
  username     String         @unique
  passwordHash String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userDetails  UserDetails?
  meals        Meal[]
  userExercise UserExercise[]
}

model UserDetails {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @unique
  weight        Float?
  age           Int?
  height        Int?
  plan          Plan?
  gender        Gender?
  activityLevel ActivityLevel?
}

enum Gender {
  M
  F
}

enum ActivityLevel {
  SEDENTARY // little or no exercise (desk job)
  LIGHTLY_ACTIVE // light exercise or sports 1-3 days a week (light walking, light jogging, etc.)
  MODERATELY_ACTIVE // moderate exercise or sports 3-5 days a week (jogging, swimming, etc.)
  VERY_ACTIVE // hard exercise or sports 6-7 days a week (running, swimming, etc.)
  SUPER_ACTIVE // very hard exercise or sports, physical job, or training twice a day
}

enum Plan {
  MAINTENANCE
  WEIGHT_LOSS
  WEIGHT_GAIN
}

model Food {
  id                String      @id @default(uuid())
  name              String
  baseServingUnit   ServingUnit @relation(fields: [baseServingUnitId], references: [id])
  baseServingSize   Float
  calories          Float
  protein           Float
  carbs             Float
  fat               Float
  sugar             Float
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  baseServingUnitId String
  MealItem          MealItem[]

  @@unique([name, baseServingUnitId])
}

model ServingUnit {
  id           String           @id @default(uuid())
  name         String           @unique
  abbreviation String           @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  food         Food[]
  fromUnit     UnitConversion[] @relation("fromUnit")
  toUnit       UnitConversion[] @relation("toUnit")
  mealItems    MealItem[]
}

model UnitConversion {
  id         String      @id @default(uuid())
  fromUnit   ServingUnit @relation("fromUnit", fields: [fromUnitId], references: [id])
  toUnit     ServingUnit @relation("toUnit", fields: [toUnitId], references: [id])
  ratio      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  fromUnitId String
  toUnitId   String
}

model Meal {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  name      MealType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  mealDate  String
  items     MealItem[]

  @@unique([userId, name, mealDate])
}

model MealItem {
  id            String      @id @default(uuid())
  meal          Meal        @relation(fields: [mealId], references: [id])
  mealId        String
  food          Food        @relation(fields: [foodId], references: [id])
  foodId        String
  amount        Float
  unit          ServingUnit @relation(fields: [servingUnitId], references: [id])
  servingUnitId String
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACKS
}

model Exercise {
  id                String         @id @default(uuid())
  name              String         @unique
  description       String?
  caloriesPerMinute Float
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userExercises     UserExercise[]
}

model UserExercise {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  date       String
  duration   Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String

  @@unique([userId, date, exerciseId])
}
